name: Generate Inframold Charts Artifacts Manifest

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - '.github/workflows/update-artifacts.yml'
      - 'charts/tfy-k8s-aws-eks-inframold/**'
      - 'charts/tfy-k8s-azure-aks-inframold/**'
      - 'charts/tfy-k8s-civo-talos-inframold/**'
      - 'charts/tfy-k8s-gcp-gke-standard-inframold/**'
      - 'charts/tfy-k8s-generic-inframold/**'
      - 'scripts/generate-artifacts-manifest/**'
      - 'scripts/upload-artifacts/**'
      - 'scripts/get-release-notes/**'

jobs:
  update-artifacts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      ARTIFACTORY_USERNAME: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_PASSWORD }}
      ARTIFACTORY_REPOSITORY_URL: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_REPOSITORY }}
      ARTIFACTORY_HELM_REGISTRY_URL: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_PUBLIC_HELM_REGISTRY }}
      CHANGELOG_S3_BUCKET: "tfy-euwe1-production-control-plane-changelog"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Log in to JFrog Artifactory
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PRIVATE_READONLY_USERNAME }}
          password: ${{ secrets.TRUEFOUNDRY_ARTIFACTORY_PRIVATE_READONLY_PASSWORD }}
          registry: ${{ vars.TRUEFOUNDRY_ARTIFACTORY_REGISTRY_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PUBLIC_ECR_IAM_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Install python dependencies
        run: |
          pip install -r scripts/upload-artifacts/requirements.txt
          pip install -r scripts/generate-artifacts-manifest/requirements.txt


      - name: Copy current manifest for changelog
        if: always()
        run: |
          cp charts/tfy-k8s-aws-eks-inframold/artifacts-manifest.json charts/tfy-k8s-aws-eks-inframold/old-artifacts-manifest.json


      # Generate artifacts manifest for inframold charts
      - name: Generate Artifacts Manifest for Each Chart
        run: |
          charts_list=("tfy-k8s-aws-eks-inframold" "tfy-k8s-azure-aks-inframold" "tfy-k8s-gcp-gke-standard-inframold" "tfy-k8s-civo-talos-inframold" "tfy-k8s-generic-inframold")
          for chart in "${charts_list[@]}"; do
            version=$(cat charts/$chart/Chart.yaml | grep version | awk '{print $2}')
          
            python scripts/generate-artifacts-manifest/artifacts_template_generator.py $chart https://truefoundry.github.io/infra-charts/ \
              $version charts/$chart/values-artifact-manifest.yaml charts/$chart/artifacts-manifest.json scripts/generate-artifacts-manifest/extra.json
          done
        env:
          MODE: 'local'

      # Check if truefoundry chart images support amd64 and arm64 using AWS chart
      - name: Check if Truefoundry Chart Images Support Multiple Architectures
        run: |
          python scripts/generate-artifacts-manifest/check_chart_images_support_multiple_architectures.py \
          charts/tfy-k8s-aws-eks-inframold/artifacts-manifest.json \
          scripts/generate-artifacts-manifest/multi-arch-image-whitelist.json

      # Generate changelog step is run on only tfy-k8s-aws-eks-inframold chart
      - name: Generate Changelog
        id: generate_changelog
        run: |
          # extract old/new truefoundry revisions
          old_rev=$(jq -r '.[] | select(.details.chart=="truefoundry") | .details.targetRevision' charts/tfy-k8s-aws-eks-inframold/old-artifacts-manifest.json)
          new_rev=$(jq -r '.[] | select(.details.chart=="truefoundry") | .details.targetRevision' charts/tfy-k8s-aws-eks-inframold/artifacts-manifest.json)

          if [ "$old_rev" != "$new_rev" ]; then
            echo truefoundry chart version has changed from $old_rev to $new_rev, generating changelog"
            python scripts/get-release-notes/chart_changes.py \
              charts/tfy-k8s-aws-eks-inframold/old-artifacts-manifest.json \
              charts/tfy-k8s-aws-eks-inframold/artifacts-manifest.json \
              --version $new_rev \
              --output charts/tfy-k8s-aws-eks-inframold/changelog.json
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$new_rev" >> $GITHUB_OUTPUT
        env:
          TFY_GITHUB_TOKEN: ${{ secrets.TFY_GITHUB_TOKEN }}

      - name: Configure AWS credentials for s3 uploads
        if: steps.generate_changelog.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.S3_IAM_ROLE_ARN }}
          aws-region: us-east-1

      - name: Check if Changelog Exists in S3
        id: check_changelog_uploaded
        if: steps.generate_changelog.outputs.changed == 'true'
        run: |
          version=${{ steps.generate_changelog.outputs.version }}
          changelog_path="s3://$CHANGELOG_S3_BUCKET/$version/changelog.json"
          if aws s3 ls "$changelog_path" > /dev/null 2>&1; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
          fi


      - name: Upload Changelog to S3
        if: steps.check_changelog_uploaded.outputs.exists == 'false'
        run: |
          version=${{ steps.generate_changelog.outputs.version }}
          aws s3 cp charts/tfy-k8s-aws-eks-inframold/changelog.json s3://$CHANGELOG_S3_BUCKET/$version/changelog.json

      

      - name: Cleanup Old Manifest & Changelog
        if: steps.generate_changelog.outputs.changed == 'true'
        run: |
          rm -f charts/tfy-k8s-aws-eks-inframold/old-artifacts-manifest.json
          rm -f charts/tfy-k8s-aws-eks-inframold/changelog.json

      

      - name: Commit & Push Updates
        if: steps.generate_changelog.outputs.changed == 'true'
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          if git diff --cached --quiet; then
            echo "Nothing to commit"
          else
            git commit -am "[CI] Update charts artifacts manifest files" --signoff
            git pull origin --rebase
            git push
          fi
