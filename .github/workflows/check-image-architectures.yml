name: Check Image Architectures

on:
  push:
    paths:
      - 'charts/**/artifacts-manifest.json'
  pull_request:
    paths:
      - 'charts/**/artifacts-manifest.json'

jobs:
  check-architectures:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check image architectures
        run: |
          failed_images=()  # Array to store images that fail the architecture check
          for file in $(find charts -name 'artifacts-manifest.json'); do
            echo "Checking architectures in $file"
            images=$(jq -r '.[] | select(.type == "image") | .details.registryURL' "$file")
            for image_url in $images; do
              # Skip if the image name matches "auto" or ends with "auto"
              if [[ "$image_url" =~ /auto$ ]]; then
                echo "Skipping image $image_url"
                continue
              fi

              architectures=$(docker manifest inspect "$image_url" | jq -r '.manifests[].platform.architecture' | sort -u)
              # Check for both architectures separately
              if ! echo "$architectures" | grep -q 'amd64' || ! echo "$architectures" | grep -q 'arm64'; then
                echo "Image $image_url does not have both AMD64 and ARM64 architectures"
                failed_images+=("$image_url")  # Add to the list
              fi
            done
          done

          if [ ${#failed_images[@]} -ne 0 ]; then
            echo "The following images do not have both architectures:"
            for img in "${failed_images[@]}"; do
              echo "$img"  # Print the failed images
            done
            exit 1
          fi
