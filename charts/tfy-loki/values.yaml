## @section Upstream Loki configurations
##
loki:
  ## @param loki.enabled Enable loki
  enabled: true
  loki:
    rbac:
      namespaced: true
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    pattern_ingester:
        enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
      ingestion_rate_mb: 10        
      ingestion_burst_size_mb: 20   
      retention_period: 168h
    ruler:
      enable_api: true
    storage:
      type: 'filesystem'
    compactor:
        retention_enabled: true
        delete_request_store: filesystem
  compactor:
    replicas: 1
  lokiCanary:
    enabled: false

  minio:
    enabled: false

  deploymentMode: SingleBinary

  singleBinary:
    replicas: 1

  test:
    enabled: false

  # Zero out replica counts of other deployment modes
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloom_gateway:
    enabled: false
  memcached: 
    chunk_cache.enabled: false
  chunksCache:
    enabled: false
  resultsCache:
    enabled: false

promtail:
  ## @param promtail.enabled Enable promtail
  enabled: false
  ## @param promtail.priorityClassName Priority class name for promtail DaemonSet
  priorityClassName: system-node-critical
  config:
    clients:
      ## @param promtail.config.clients[0].url Loki push API URL
      - url: http://loki:3100/loki/api/v1/push
    snippets:
      ## @skip promtail.config.snippets.extraRelabelConfigs
      extraRelabelConfigs:
        - regex: __meta_kubernetes_pod_label_(.+)
          action: labelmap
  ## @param promtail.resources.requests.cpu CPU requests for promtail container
  ## @param promtail.resources.requests.memory Memory requests for promtail container
  ## @param promtail.resources.requests.ephemeral-storage Ephemeral storage requests for promtail container
  ## @param promtail.resources.limits.cpu CPU limits for promtail container
  ## @param promtail.resources.limits.memory Memory limits for promtail container
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
      ephemeral-storage: 256Mi
    limits:
      cpu: 200m
      memory: 1024Mi
  tolerations:
    ## @skip promtail.tolerations[0]
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
      operator: Exists
    ## @skip promtail.tolerations[1]
    - key: node-role.kubernetes.io/control-plane
      effect: NoSchedule
      operator: Exists
    ## @skip promtail.tolerations[2]
    - effect: NoSchedule
      operator: Exists
    ## @skip promtail.tolerations[3]
    - key: CriticalAddonsOnly
      operator: Exists
    ## @skip promtail.tolerations[4]
    - effect: NoExecute
      operator: Exists
alloy:
  enabled: true
  alloy:
    configMap:
      content: |-
          // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
          // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
          discovery.kubernetes "pod" {
            role = "pod"
          }

          // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
          // If no rules are defined, then the input targets are exported as-is.
          discovery.relabel "pod_logs" {
            targets = discovery.kubernetes.pod.targets

            // Label creation - "namespace" field from "__meta_kubernetes_namespace"
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              action = "replace"
              target_label = "namespace"
            }

            // Label creation - "pod" field from "__meta_kubernetes_pod_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              action = "replace"
              target_label = "pod"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "container"
            }

            // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              action = "replace"
              target_label = "app"
            }

            // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "job"
              separator = "/"
              replacement = "$1"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "__path__"
              separator = "/"
              replacement = "/var/log/pods/*$1/*.log"
            }

            // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_id"]
              action = "replace"
              target_label = "container_runtime"
              regex = "^(\\S+):\\/\\/.+$"
              replacement = "$1"
            }
          }

          // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
          loki.source.kubernetes "pod_logs" {
            targets    = discovery.relabel.pod_logs.output
            forward_to = [loki.write.loki.receiver]
          }

          loki.write "loki" {
            endpoint {
              url = "http://loki-alloy:3100/loki/api/v1/push"
            }
          }
        