apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: gpu-default
  namespace: karpenter
spec:
  instanceProfile: {{ .Values.karpenter.instanceProfile }}
  subnetSelector:
    kubernetes.io/cluster/{{ .Values.cluster.name }}: shared
    subnet: private
  securityGroupSelector:
    karpenter.sh/discovery: {{ .Values.cluster.name }}
  tags:
    karpenter.sh/discovery: {{ .Values.cluster.name }}
  {{- range $key, $val := .Values.karpenter.defaultNodeTemplate.extraTags }}
    {{ $key }}: {{ $val }} 
  {{- end }}
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        deleteOnTermination: true
  userData: |
    #!/bin/bash

    set -ex

    version_lte() {
        printf '%s\n' "$1" "$2" | sort -C -V
    }

    version_lt() {
        ! version_lte "$2" "$1"
    }

    CONTAINERD_VERSION_OUTPUT="$(containerd --version)"
    IFS=" " read -a  CONTAINERD_VERSION_STRING <<< "${CONTAINERD_VERSION_OUTPUT}"
    CONTAINERD_VERSION=${CONTAINERD_VERSION_STRING[2]}
    echo "${CONTAINERD_VERSION}"

    if [ -n "$CONTAINERD_VERSION" ] && version_lte "1.5.0" "$CONTAINERD_VERSION" && version_lt "$CONTAINERD_VERSION" "2.0"; then
        echo "CONTAINERD_VERSION is not empty and within the range [1.5.0, 2.0)."
        echo "Patching /etc/eks/containerd/containerd-config.toml"
        mkdir -p /etc/eks/containerd

        cat > /etc/eks/containerd/containerd-config.toml << EOF

    root = "/var/lib/containerd"
    state = "/run/containerd"

    [grpc]
    address = "/run/containerd/containerd.sock"

    [plugins.cri]
    sandbox_image = "602401143452.dkr.ecr.eu-west-1.amazonaws.com/eks/pause:3.5"

    [plugins.cri.registry]
    config_path = "/etc/containerd/certs.d:/etc/docker/certs.d"

    [plugins.cri.containerd]
    default_runtime_name = "nvidia"

    [plugins.cri.containerd.runtimes.nvidia]
    privileged_without_host_devices = false
    runtime_engine = ""
    runtime_root = ""
    runtime_type = "io.containerd.runtime.v1.linux"

    [plugins.cri.containerd.runtimes.nvidia.options]
    Runtime = "/etc/docker-runtimes.d/nvidia"
    SystemdCgroup = true

    EOF

    else
        echo "CONTAINERD_VERSION is empty or not within the specified range."
    fi
