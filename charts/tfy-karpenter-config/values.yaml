## @section Cluster configurations
##
cluster:
  ## @param cluster.name Name of the EKS cluster
  ##
  name: ""
  ## @param cluster.endpoint Endpoint of the EKS cluster
  ##
  endpoint: ""

## @section Karpenter configurations
##
karpenter:
  ## @param karpenter.instanceProfile Instance profile of the karpenter
  ##
  instanceProfile: ""
  
  ##
  # default provisioner for non-GPU workloads
  defaultProvisionerSpec:
    # nodes should consolidate to fit in the right instance size
    consolidation:
      ## @param karpenter.defaultProvisionerSpec.consolidation.enabled Enable consolidation for default provisioner
      ##
      enabled: true

    ## @extra karpenter.defaultProvisionerSpec.ttlSecondsAfterEmpty Seconds after which node should be deleted once it is empty. Either one of consolidation or ttlSecondsAfterEmtpy should be used
    ## 
    # ttlSecondsAfterEmpty: 30
    
    ## @skip karpenter.defaultProvisionerSpec.requirements
    requirements:
      - key: karpenter.sh/capacity-type
        operator: In
        values: ["spot"]
      - key: "topology.kubernetes.io/zone"
        operator: In
        values: ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
      - key: kubernetes.io/arch
        operator: In
        values: ["amd64"]
      - key: karpenter.k8s.aws/instance-family
        operator: NotIn
        values: ["t3", "t2", "t3a", "p2", "p3", "p4d", "p4de", "g4dn", "g5", "g4ad", "inf1", "inf2", "trn1", "trn1n"]
      - key: karpenter.k8s.aws/instance-size
        operator: NotIn
        values: ["nano", "micro", "metal"]

    ## @param karpenter.defaultProvisionerSpec.providerRef.name AWS node template name for default provisioner
    ##
    providerRef:
      name: default

  ## provisioner for GPU workloads
  gpuProvisionerSpec:
    ## @param karpenter.gpuProvisionerSpec.enabled Enable GPU provisioner for GPU nodes
    enabled: false

    ## @param karpenter.gpuProvisionerSpec.consolidation.enabled Enable consolidation for GPU provisioner
    ##
    consolidation:
      enabled: true
    
    ## @extra karpenter.gpuProvisionerSpec.ttlSecondsAfterEmpty Seconds after which node should be deleted once it is empty. Either one of consolidation or ttlSecondsAfterEmtpy should be used
    ## 
    # ttlSecondsAfterEmpty: 300
    
    ## @param karpenter.gpuProvisionerSpec.capacityTypes Capacity types for GPU provisioner
    ##    
    capacityTypes:
      - spot
      - on-demand
    ## @param karpenter.gpuProvisionerSpec.zones Zones to launch instances for GPU provisioner
    ## 
    zones: []
    ## @param karpenter.gpuProvisionerSpec.instanceFamilies Instance families to launch instances for GPU provisioner
    ## 
    instanceFamilies:
      - p2
      - p3
      - g4dn
      - g5
      - p4d
      - p4de
    ## @param karpenter.gpuProvisionerSpec.instanceSizes.notAllowed Instance Sizes that are not allowed to launch instances for GPU provisioner
    ##
    instanceSizes:
      notAllowed:
        - nano
        - micro
        - metal
    ## @param karpenter.gpuProvisionerSpec.providerRefName Name of AWS node template to be used for GPU provisioner
    ##
    providerRefName: default

  ## @param karpenter.defaultNodeTemplate.extraTags Additional tags for the node template.
  ##
  defaultNodeTemplate:
    extraTags: {}