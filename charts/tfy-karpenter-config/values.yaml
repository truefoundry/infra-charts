## @section Cluster configurations
##
cluster:
  ## @param cluster.name Name of the EKS cluster
  ##
  name: ""
  ## @param cluster.endpoint Endpoint of the EKS cluster
  ##
  endpoint: ""

## @section Karpenter configurations
##
karpenter:
  ## @param karpenter.instanceProfile Instance profile of the karpenter
  ##
  instanceProfile: ""

  ## Default Node Template Config
  defaultNodeTemplate:
    ## @param karpenter.defaultNodeTemplate.rootVolumeSize Size for the root volume attached to node
    rootVolumeSize: 100Gi
    ## @param karpenter.defaultNodeTemplate.extraTags Additional tags for the node template.
    extraTags: {}
    ## @param karpenter.defaultNodeTemplate.amiFamily AMI family to use for node template
    amiFamily: "AL2"
    ## @skip karpenter.defaultNodeTemplate.userData
    # Set this to "" to disable this injection
    userData: ""
    ## @param karpenter.defaultNodeTemplate.detailedMonitoring
    # Set this to true to enable EC2 detailed cloudwatch monitoring
    detailedMonitoring: false

  defaultNodePool:
    enabled: true
    weight: 10
    labels: {}
    taints: []
    disruption:
      consolidationPolicy: WhenUnderutilized
      expireAfter: 300
    capacityTypes:
      - spot
    zones: ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
    architectures:
      - amd64
    instanceFamilies:
      notAllowed: ["t3", "t2", "t3a", "p2", "p3", "p4d", "p4de", "p5", "g4dn", "g5", "g4ad", "inf1", "inf2", "trn1", "trn1n"]
    instanceSizes:
      notAllowed: ["nano", "micro", "metal"]
    ec2NodeClassRefName: default
    limits:
      cpu: 75
      memory: 300Gi


  ## Defautl GPU Node Template Config
  gpuDefaultNodeTemplate:
    ## @param karpenter.gpuDefaultNodeTemplate.rootVolumeSize Size for the root volume attached to node
    rootVolumeSize: 100Gi
    ## @param karpenter.gpuDefaultNodeTemplate.extraTags Additional tags for the gpu node template.
    extraTags: {}
    ## @param karpenter.gpuDefaultNodeTemplate.detailedMonitoring
    # Set this to true to enable EC2 detailed cloudwatch monitoring
    detailedMonitoring: false
    ## @param karpenter.gpuDefaultNodeTemplate.amiFamily AMI family to use for node template
    amiFamily: "AL2"
    ## @skip karpenter.gpuDefaultNodeTemplate.userData
    # Set this to "default" to let the chart automatically decide this
    # Set this to "" to disable this injection
    userData: "default"

  ## nodepool for GPU node pools
  gpuNodePool:
    enabled: false
    weight: 10
    labels: {}
    taints: []
    disruption:
      consolidationPolicy: WhenUnderutilized
      expireAfter: 300
    capacityTypes:
      - spot
      - on-demand
    zones: []
    architectures:
      - amd64
    instanceFamilies:
      allowed:
        - p2
        - p3
        - g4dn
        - g5
        - p4d
        - p4de
    instanceSizes:
      notAllowed:
        - nano
        - micro
        - metal
    ec2NodeClassRefName: gpu-default

    ## nodepool for GPU node pools

  ## control plane node template
  ## control plane provisioner by default will use default node template
  ## if needed we can supply a different node template for control plane provisioner as well
  controlPlaneNodeTemplate:
    ## @param karpenter.controlPlaneNodeTemplate.enabled Size for the root volume attached to node
    enabled: false
    ## @param karpenter.controlPlaneNodeTemplate.name Name of the AWS node template
    name: controlplane-node-template
    ## @param karpenter.controlPlaneNodeTemplate.rootVolumeSize Size for the root volume attached to node
    rootVolumeSize: 100Gi
    ## @param karpenter.controlPlaneNodeTemplate.extraTags Additional tags for the node template.
    extraTags: {}
    ## @param karpenter.controlPlaneNodeTemplate.amiFamily AMI family to use for node template
    amiFamily: "AL2"
    ## @skip karpenter.controlPlaneNodeTemplate.userData
    # Set this to "" to disable this injection
    userData: ""
    ## @param karpenter.controlPlaneNodeTemplate.detailedMonitoring
    # Set this to true to enable EC2 detailed cloudwatch monitoring
    detailedMonitoring: false

  controlPlaneNodePool:
    enabled: false
    weight: 10
    labels: {}
    taints: []
    disruption:
      consolidationPolicy: WhenUnderutilized
      expireAfter: 300
    capacityTypes:
      - spot
      - on-demand
    zones: []
    architectures:
      - amd64
    instanceFamilies:
      allowed: []
      notAllowed: ["t3", "t2", "t3a", "p2", "p3", "p4d", "p4de", "g4dn", "g5", "g4ad", "inf1", "inf2", "trn1", "trn1n", "c1", "cc1", "cc2", "cg1", "cg2", "cr1", "g1", "g2", "hi1", "hs1", "m1", "m2", "m3"]
    instanceSizes:
      allowed: []
      notAllowed: ["nano", "12xlarge", "16xlarge", "24xlarge", "32xlarge", "metal"]
    ec2NodeClassRefName: controlplane-node-template

  ## Default Inferentia Node Template Config
  inferentiaDefaultNodeTemplate:
    ## @param karpenter.inferentiaDefaultNodeTemplate.rootVolumeSize Size for the root volume attached to node
    rootVolumeSize: 100Gi
    ## @param karpenter.inferentiaDefaultNodeTemplate.extraTags Additional tags for the node template.
    extraTags: {}
    ## @param karpenter.inferentiaDefaultNodeTemplate.detailedMonitoring
    # Set this to true to enable EC2 detailed cloudwatch monitoring
    detailedMonitoring: false
    ## @param karpenter.inferentiaDefaultNodeTemplate.amiFamily AMI family to use for node template
    amiFamily: "AL2"
    ## @skip karpenter.inferentiaDefaultNodeTemplate.userData
    # Set this to "" to disable this injection
    userData: ""

  inferentiaNodePool:
    enabled: false
    weight: 10
    labels: {}
    taints: []
    disruption:
      consolidationPolicy: WhenUnderutilized
      expireAfter: 300
    capacityTypes:
      - spot
      - on-demand
    zones: []
    architectures:
      - amd64
    instanceFamilies:
      allowed: ["inf1", "inf2"]
    instanceSizes:
      notAllowed: ["48xlarge"]
    ec2NodeClassRefName: inferentia-default  