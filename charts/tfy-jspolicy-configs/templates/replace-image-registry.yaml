{{- if .Values.replaceImageRegistry.enabled -}}
apiVersion: policy.jspolicy.com/v1beta1
kind: JsPolicy
metadata:
  name: {{ .Release.Name }}-replace-image-registry.truefoundry.com
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tfy-jspolicy-configs.labels" . | nindent 4 }}
  annotations:
    {{- include "tfy-jspolicy-configs.annotations" . | nindent 4 }}
spec:
  type: Mutating
  operations: ["CREATE", "UPDATE"]
  resources: ["pods"]
  failurePolicy: Ignore
  dependencies:
    "js-yaml": "^4.1.0"
  javascript: |
    import { load } from 'js-yaml';

    function parseYamlString(yamlString) {
      try {
        return load(yamlString);
      } catch (e) {
        console.log("Error parsing YAML string:", e);
        return null;
      }
    }

    // get the namespaces from the input namespaces. If inputNamespace is a string, return the string. If inputNamespace is an array, return the array. If inputNamespace is a regex, return the namespaces that match the regex. Only basic regex is supported.
    function getNamespaces(inputNamespace) {
      let namespaceList = [];
      let filteredNamespaces = [];
      const allNamespaces = list("Namespace", "v1").map(namespace => namespace.metadata.name);
      for (let i in inputNamespace) {
        if (inputNamespace[i] === "*") {
          namespaceList = allNamespaces;
          break;
        }
        if (inputNamespace[i].includes("*")) {
          const regex = new RegExp(inputNamespace[i]);
          filteredNamespaces = allNamespaces.filter(namespace => regex.test(namespace));
          namespaceList = [...namespaceList, ...filteredNamespaces];
        } else {
          namespaceList.push(inputNamespace[i]);
        }
      }
      return namespaceList;
    }

    const inputExcludedNamespaces = parseYamlString(`{{ .Values.replaceImageRegistry.excludeNamespaces | toYaml | nindent 4 }}`)
    const inputInlcudedNamespaces = parseYamlString(`{{ .Values.replaceImageRegistry.includeNamespaces | toYaml | nindent 4 }}`)
    const inputExcludedRegistries = parseYamlString(`{{ .Values.replaceImageRegistry.excludeRegistries | toYaml | nindent 4 }}`)
    const includedNamespaces = getNamespaces(inputInlcudedNamespaces);
    const excludedNamespaces = getNamespaces(inputExcludedNamespaces);
    print("includedNamespaces", includedNamespaces);
    print("excludedNamespaces", excludedNamespaces);
    const registryReplacementMap = parseYamlString(`{{ .Values.replaceImageRegistry.registryReplacementMap | toYaml | nindent 4 }}`)
    if ((includedNamespaces.length > 0 && !includedNamespaces.includes(request.namespace)) || excludedNamespaces.includes(request.namespace) || !registryReplacementMap) {
      exit()
    }
    /*
    * Normalize the image name to a standard format
    * image_normalize("nginx") docker.io/library/nginx:latest
    * image_normalize("nginx:1.1") docker.io/library/nginx:1.1
    * image_normalize("nginx:latest") docker.io/library/nginx:latest
    * image_normalize("nginx:1.1@sha256:asdasdasdsadsad") docker.io/library/nginx:1.1
    * image_normalize("docker.io/truefoundrycloud/nginx:1.1@sha256:asdasdasdsadsad") docker.io/truefoundrycloud/nginx:1.1
    * image_normalize("docker.io/nginx") docker.io/library/nginx:latest
    */
    function image_normalize(image) {
      const defaultRegistry = 'docker.io';
      const defaultNamespace = 'library';
      const defaultTag = 'latest';
      let registry = defaultRegistry;
      let namespace = defaultNamespace;
      let repository = '';
      let tag = defaultTag;

      // Check if sha256 is specified
      const atSignIndex = image.lastIndexOf('@');
      if (atSignIndex > -1) {
        tag = tag.substring(atSignIndex + 1);
        image = image.substring(0, atSignIndex);
      }

      // Check if there's a registry specified
      const slashIndex = image.indexOf('/');
      if (slashIndex > -1) {
        const maybeRegistry = image.substring(0, slashIndex);
        // A registry should contain a dot or a colon
        if (maybeRegistry.includes('.') || maybeRegistry.includes(':')) {
          registry = maybeRegistry;
          image = image.substring(slashIndex + 1);
        }
      }

      // Check if there's a namespace specified
      const namespaceIndex = image.indexOf('/');
      if (namespaceIndex > -1) {
        namespace = image.substring(0, namespaceIndex);
        image = image.substring(namespaceIndex + 1);
      }

      // Don't use defaultNamespace for non docker.io registry
      if (registry !== defaultRegistry && namespace === defaultNamespace) {
        namespace = '';
      }

      // Check if there's a tag specified
      const colonIndex = image.lastIndexOf(':');
      if (colonIndex > -1) {
        tag = image.substring(colonIndex + 1);
        image = image.substring(0, colonIndex);
      }

      // The remaining part is the repository
      repository = image;
      if (namespace === '') {
        return [registry, `${registry}/${repository}:${tag}`];
      } else {
      return [registry, `${registry}/${namespace}/${repository}:${tag}`];
      }
    }
    
    function get_new_image_uri(initialImageUri, registryReplacementMap) {
      const result = image_normalize(initialImageUri)
      const registry = result[0]
      const imageUri = result[1]
      print (initialImageUri, registry, imageUri)
      let newImageUri = imageUri;
      if (inputExcludedRegistries.includes(registry)) {
        return imageUri;
      }
      let registryReplacement = registryReplacementMap[registry];
      if (!registryReplacement) {
        if (!registryReplacementMap['*']) {
          return imageUri;
        }
        registryReplacement = registryReplacementMap['*'];
      }

      // This is to avoid replacing the registry if it's already replaced
      if (imageUri.startsWith(registryReplacement)) {
        return imageUri;
      }
      newImageUri = imageUri.replace(registry, registryReplacement);
      return newImageUri
    }
    for (var container of (request.object.spec.containers || [])) {
      container.image = get_new_image_uri(container.image, registryReplacementMap)
    }

    for (var container of (request.object.spec.initContainers || [])) {
      container.image = get_new_image_uri(container.image, registryReplacementMap)
    }
    
    mutate(request.object);
{{- end -}}
