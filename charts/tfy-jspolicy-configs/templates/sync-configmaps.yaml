{{- if .Values.syncConfigMaps.enabled -}}
apiVersion: policy.jspolicy.com/v1beta1
kind: JsPolicy
metadata:
  name: "{{ .Release.Name }}-sync-configmaps.truefoundry.com"
  labels:
    {{- include "tfy-jspolicy-configs.labels" . | nindent 4 }}
  annotations:
    {{- include "tfy-jspolicy-configs.annotations" . | nindent 4 }}
spec:
  operations: ["CREATE"]
  resources: ["configMaps"]
  dependencies:
    "js-yaml": "^4.1.0"
  type: Controller
  javascript: |
    // this policy will sync changes to a configmap to all other configmaps in the cluster
    // that have labels in syncConfigMaps.labelSelector
    import { load } from 'js-yaml';

    function parseYamlString(yamlString) {
      try {
        return load(yamlString);
      } catch (e) {
        console.log("Error parsing YAML string:", e);
        return null;
      }
    }

    const excludedNamespaces = parseYamlString(`{{ .Values.syncConfigMaps.excludeNamespaces | toYaml | nindent 4 }}`);
    let includedNamespaces = [];
    let filteredNamespaces = [];
    const allNamespaces = list("Namespace", "v1").map(namespace => namespace.metadata.name);
    let inputNamespaces = parseYamlString(`{{ .Values.syncConfigMaps.includeNamespaces | toYaml | nindent 4 }}`);
    if (inputNamespaces === "*") {
      includedNamespaces = allNamespaces;
    } else {
      for (let i in inputNamespaces) {
        if (inputNamespaces[i].includes("*")) {
          const regex = new RegExp(inputNamespaces[i]);
          filteredNamespaces = allNamespaces.filter(namespace => regex.test(namespace));
          includedNamespaces = [...includedNamespaces, ...filteredNamespaces];
        } else {
          includedNamespaces.push(inputNamespaces[i]);
        }
      }
    }
    const configMapNames = parseYamlString(`{{ .Values.syncConfigMaps.configMapNames | toYaml | nindent 4 }}`);

    if (includedNamespaces.length < 0 || configMapNames.length < 0) {
      exit();
    } 

    // sync a configmaps to all namespaces in includedNamespaces
    function syncConfigMapToAllIncludedNamespaces(parentConfigMapObject) {
      includedNamespaces.forEach(namespace => {
        if (!allNamespaces.includes(namespace)) {
          print("Skipping creating configmap " + parentConfigMapObject.metadata.name + " in namespace " + namespace + " as it doesn't exists ...");
          return;
        }
        if (excludedNamespaces.includes(namespace)){
          return;
        }

        // skip if the current namespace is the same as the parentConfigMap's namespace
        if (parentConfigMapObject.metadata.namespace === namespace) {
          return;
        }
        print("Syncing configmaps " + parentConfigMapObject.metadata.name + " to namespace: " + namespace);
        let configmap = get("ConfigMap", "v1", namespace + "/" + parentConfigMapObject.metadata.name);
        if (configmap === undefined) {
          print("configmap not found, creating configmap " + parentConfigMapObject.metadata.name + " in namespace: " + namespace);
          configmap = create({
            "kind": "ConfigMap",
            "apiVersion": "v1",
            "metadata": {
              "name": parentConfigMapObject.metadata.name,
              "namespace": namespace
            },
            "data": parentConfigMapObject.data
          });
          print("Successfully created configmap " + configmap.metadata.namespace + "/" + configmap.metadata.name);
        } else if (JSON.stringify(configmap.data) === JSON.stringify(parentConfigMapObject.data)) {
          print("ConfigMap " + parentConfigMapObject.metadata.name + " already exists in the namespace " + namespace + " and is the same, skipping");
        } else {
          print("ConfigMap " + parentConfigMapObject.metadata.name + " already exists in the namespace " + namespace + " and is different, updating");
          configmap.data = parentConfigMapObject.data;
          const updateResult = update(configmap);
          if (!updateResult.ok) {
            // just requeue if we encounter an error
            requeue(updateResult.message);
          } else {
            print(`Successfully synced configmap ${configmap.metadata.namespace}/${configmap.metadata.name}`);
          }
        }
        return;       
      })
    }


    configMapNames.forEach(configMapName => {
      let parentConfigMap = get("ConfigMap", "v1", configMapName);
      if (!parentConfigMap) {
        print("configmap '" + configMapName + "'' is not found");
        return;
      }
      print("Syncing configmap "+ configMapName + " in namespaces...")
      syncConfigMapToAllIncludedNamespaces(parentConfigMap);
    });
{{- end -}}