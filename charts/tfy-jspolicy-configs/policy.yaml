apiVersion: policy.jspolicy.com/v1beta1
kind: JsPolicy
metadata:
  name: tfy-replace-image-registry.truefoundry.com
  namespace: jspolicy-test
spec:
  type: Mutating
  operations: ["CREATE", "UPDATE"]
  resources: ["pods"]
  javascript: |
    const excludedNamespaces = ["kube-system", "kube-public", "kube-node-lease"]
    const includedNamespaces = ["jspolicy-test"]
    if (!includedNamespaces.includes(request.namespace) || excludedNamespaces.includes(request.namespace)) {
      return
    }
    registryReplacementMap = {
      "docker.io" : "mydocker.io",
      "*" : "myjrog.io"
    }
    /*
    * Normalize the image name to a standard format
    * image_normalize("nginx") docker.io/library/nginx:latest
    * image_normalize("nginx:1.1") docker.io/library/nginx:1.1
    * image_normalize("nginx:latest") docker.io/library/nginx:latest
    * image_normalize("nginx:1.1@sha256:asdasdasdsadsad") docker.io/library/nginx:1.1
    * image_normalize("docker.io/truefoundrycloud/nginx:1.1@sha256:asdasdasdsadsad") docker.io/truefoundrycloud/nginx:1.1
    * image_normalize("docker.io/nginx") docker.io/library/nginx:latest
    */
    function image_normalize(image) {
      const defaultRegistry = 'docker.io';
      const defaultNamespace = 'library';
      const defaultTag = 'latest';
      let registry = defaultRegistry;
      let namespace = defaultNamespace;
      let repository = '';
      let tag = defaultTag;

      // Check if sha256 is specified
      const atSignIndex = image.lastIndexOf('@');
      if (atSignIndex > -1) {
        tag = tag.substring(atSignIndex + 1);
        image = image.substring(0, atSignIndex);
      }

      // Check if there's a registry specified
      const slashIndex = image.indexOf('/');
      if (slashIndex > -1) {
        const maybeRegistry = image.substring(0, slashIndex);
        // A registry should contain a dot or a colon
        if (maybeRegistry.includes('.') || maybeRegistry.includes(':')) {
          registry = maybeRegistry;
          image = image.substring(slashIndex + 1);
        }
      }

      // Check if there's a namespace specified
      const namespaceIndex = image.indexOf('/');
      if (namespaceIndex > -1) {
        namespace = image.substring(0, namespaceIndex);
        image = image.substring(namespaceIndex + 1);
      }

      // Check if there's a tag specified
      const colonIndex = image.lastIndexOf(':');
      if (colonIndex > -1) {
        tag = image.substring(colonIndex + 1);
        image = image.substring(0, colonIndex);
      }

      

      // The remaining part is the repository
      repository = image;
      return [registry, `${registry}/${namespace}/${repository}:${tag}`];
    }
    
    function get_new_image_uri(initialImageUri, registryReplacementMap) {
      const result = image_normalize(initialImageUri)
      const registry = result[0]
      const imageUri = result[1]
      print (initialImageUri, registry, imageUri)
      let newImageUri = imageUri;
      
      if (registryReplacementMap[registry]) {
        newImageUri = imageUri.replace(registry, registryReplacementMap[registry]);
      } else if (registryReplacementMap['*']) {
        newImageUri = imageUri.replace(registry, registryReplacementMap['*']);
      }
      return newImageUri
    }
    for (var container of (request.object.spec.containers || [])) {
      container.image = get_new_image_uri(container.image, registryReplacementMap)
    }

    for (var container of (request.object.spec.initContainers || [])) {
      container.image = get_new_image_uri(container.image, registryReplacementMap)
    }
    
    mutate(request.object);
