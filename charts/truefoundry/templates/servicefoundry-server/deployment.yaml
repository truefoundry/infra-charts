{{- if .Values.servicefoundryServer.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "servicefoundry-server.fullname" . }}
  labels:
    {{- include "servicefoundry-server.commonLabels" . | nindent 4 }}
  annotations:
    {{- include "servicefoundry-server.deploymentAnnotations" . | nindent 4 }}
spec:
  replicas: {{- include "servicefoundry-server.replicas" . | indent 1 }}
  selector:
    matchLabels:
      {{- include "truefoundry.selectorLabels" (dict "context" . "name" "servicefoundry-server") | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "servicefoundry-server.podAnnotations" . | nindent 8 }}
      labels:
        {{- include "servicefoundry-server.podLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "servicefoundry-server.serviceAccountName" . }}
      {{- with .Values.servicefoundryServer.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: "servicefoundry-server"
          {{- with .Values.servicefoundryServer.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{- include "servicefoundry-server.env" . | trim | nindent 12 }}
          image: "{{ .Values.servicefoundryServer.image.registry | default .Values.global.image.registry }}/{{ .Values.servicefoundryServer.image.repository }}:{{ .Values.servicefoundryServer.image.tag }}"
          imagePullPolicy: {{ .Values.servicefoundryServer.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.servicefoundryServer.service.port }}
              protocol: TCP
          resources:
            {{- include "servicefoundry-server.resources" . | indent 12 }}
          livenessProbe:
            failureThreshold: {{ .Values.servicefoundryServer.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.servicefoundryServer.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.servicefoundryServer.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.servicefoundryServer.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.servicefoundryServer.livenessProbe.timeoutSeconds }}
            httpGet:
              path: /v1/health
              port: {{ .Values.servicefoundryServer.service.port }}
              scheme: HTTP
          readinessProbe:
            failureThreshold: {{ .Values.servicefoundryServer.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.servicefoundryServer.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.servicefoundryServer.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.servicefoundryServer.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.servicefoundryServer.readinessProbe.timeoutSeconds }}
            httpGet:
              path: /v1/health
              port: {{ .Values.servicefoundryServer.service.port }}
              scheme: HTTP
          volumeMounts:
            {{- include "servicefoundry-server.volumeMounts" . | nindent 12 }}
      {{- with .Values.servicefoundryServer.imagePullSecrets }}
      imagePullSecrets:
        {{- tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      volumes:
        {{- include "servicefoundry-server.volumes" . | nindent 8 }}
      {{- if .Values.servicefoundryServer.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.servicefoundryServer.nodeSelector | nindent 8 }}
      {{- end }}
      {{- $mergedAffinity := dict | merge .Values.servicefoundryServer.affinity .Values.global.affinity }}
      {{- if $mergedAffinity }}
      affinity:
      {{- toYaml $mergedAffinity | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
        {{- if .Values.servicefoundryServer.topologySpreadConstraints }}
        {{- toYaml .Values.servicefoundryServer.topologySpreadConstraints | nindent 8 }}
        {{- else }}
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              {{- include "truefoundry.selectorLabels" (dict "context" . "name" "servicefoundry-server") | nindent 14 }}
        {{- end }}
      tolerations:
        {{- .Values.global.tolerations | toYaml | nindent 8 }}
        {{- if .Values.servicefoundryServer.tolerations }}
        {{- .Values.servicefoundryServer.tolerations | toYaml | nindent 8 }}
        {{- end }}
{{- end }}
