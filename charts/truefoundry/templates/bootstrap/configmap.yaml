{{- if .Values.truefoundryBootstrap.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: truefoundry-bootstrap-cm
  annotations:
    {{- include "bootstrap-annotations" (dict "hookWeight" "-2" "syncWave" "-2" "annotations" .Values.truefoundryBootstrap.annotations "globalAnnotations" .Values.global.annotations) | nindent 4 }}
  labels:
    {{- include "bootstrap-labels" . | indent 4 }}
data:
  truefoundry-bootstrap.sh: |
    #!/bin/bash
    # This script will output one set of creds in the current directory.
    # The script creates a nats resolver config file called resolver.conf
    TRUEFOUNDRY_NATS_SECRET_NAME=truefoundry-tfy-nats-secret
    TRUEFOUNDRY_NATS_DIR_SECRET_NAME=truefoundry-tfy-nsc-dir-secret
    TRUEFOUNDRY_CREDS_SECRET_NAME=truefoundry-creds
    TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME=truefoundry-clickhouse-secret
    OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME=tfy-llm-gateway-infra-auth
    print_green() {
        echo "$(tput setaf 2)$1$(tput sgr0)"
    }
    print_yellow() {
        echo "$(tput setaf 3)$1$(tput sgr0)"
    }
    print_red() {
        echo "$(tput setaf 1)$1$(tput sgr0)"
    }

    # function to install binaries - kubectl, nsc, helm
    install_binaries() {
      apt update && apt install wget unzip tar -y \
        && wget https://github.com/nats-io/nsc/releases/download/v2.8.6/nsc-linux-amd64.zip \
        && unzip nsc-linux-amd64.zip \
        && mv nsc /usr/bin/ \
        && wget https://storage.googleapis.com/kubernetes-release/release/v1.29.3/bin/linux/amd64/kubectl \
            && chmod +x kubectl \
            && mv kubectl /usr/bin/
    }

    create_tfy_buildkit_tls_certificates_and_secrets(){
      (
        set -eu
        if [[ "$INSTALL_TLS_CERTIFICATES" != "true" ]]; then
            print_yellow "Skipping TLS certificate generation"
            return 0
        fi
        PRODUCT=tfy-buildkit
        DIR=./.certs
        EXPIRATION_DAYS=36500  # 100 years expiration
        if kubectl get secret ${PRODUCT}-daemon-certs -n "$TRUEFOUNDRY_NAMESPACE" &> /dev/null && kubectl get secret ${PRODUCT}-client-certs -n "$TRUEFOUNDRY_NAMESPACE" &> /dev/null; then
            print_green "Secrets already exist. Exiting..."
            return 0
        fi

        if [[ "$#" -lt 1 ]]; then
            echo "Usage: $0 SAN [SAN...]"
            echo
            echo "Example: $0 buildkitd.default.svc "
            echo
            echo "The following files will be created under ${DIR}"
            echo "- daemon/{ca.pem,cert.pem,key.pem}"
            echo "- client/{ca.pem,cert.pem,key.pem}"
            echo "- ${PRODUCT}-daemon-certs.yaml"
            echo "- ${PRODUCT}-client-certs.yaml"
            echo "- SAN"
            exit 1
        fi

        if ! command -v openssl >/dev/null; then
            echo "Missing OpenSSL"
            exit 1
        fi

        SAN1=$1
        SAN2=$2
        SAN_CLIENT=client

        mkdir -p $DIR ${DIR}/daemon ${DIR}/client

        openssl genrsa -out ${DIR}/key.pem 4096
        openssl req -x509 -nodes -new -sha256 -days $EXPIRATION_DAYS -keyout ${DIR}/key.pem -out ${DIR}/rootCA.pem -subj "/C=US/ST=CA/L=San-Francisco/O=TrueFoundry/CN=Root CA"


        # Generate a server private key and certificate using the root CA
        openssl genrsa -out ${DIR}/daemon/key.pem 4096
        openssl req -new -key ${DIR}/daemon/key.pem -out ${DIR}/daemon/csr.pem -subj "/C=US/ST=CA/L=San-Francisco/O=TrueFoundry/CN=server"
        openssl x509 -req -in ${DIR}/daemon/csr.pem -CA ${DIR}/rootCA.pem -CAkey ${DIR}/key.pem -CAcreateserial -out ${DIR}/daemon/cert.pem -days $EXPIRATION_DAYS -extfile <(printf "subjectAltName=DNS:%s, DNS:%s,IP:0.0.0.0" "$SAN1" "$SAN2")

        # Generate a client private key and certificate using the root CA
        openssl genrsa -out ${DIR}/client/key.pem 4096
        openssl req -new -key ${DIR}/client/key.pem -out ${DIR}/client/csr.pem -subj "/C=US/ST=CA/L=San-Francisco/O=TrueFoundry/CN=$SAN_CLIENT"
        openssl x509 -req -in ${DIR}/client/csr.pem -CA ${DIR}/rootCA.pem -CAkey ${DIR}/key.pem -CAcreateserial -out ${DIR}/client/cert.pem -days $EXPIRATION_DAYS

        # Copy the root CA certificates
        cp -f ${DIR}/rootCA.pem ${DIR}/daemon/ca.pem
        cp -f ${DIR}/rootCA.pem ${DIR}/client/ca.pem
        rm -f ${DIR}/daemon/csr.pem ${DIR}/client/csr.pem
        rm -f ${DIR}/rootCA.pem ${DIR}/key.pem

        # Create Kubernetes secrets
        kubectl create secret generic ${PRODUCT}-daemon-certs -n "$TRUEFOUNDRY_NAMESPACE" --dry-run=client -o yaml --from-file=${DIR}/daemon > $DIR/${PRODUCT}-daemon-certs.yaml
        kubectl create secret generic ${PRODUCT}-client-certs -n "$TRUEFOUNDRY_NAMESPACE" --dry-run=client -o yaml --from-file=${DIR}/client > $DIR/${PRODUCT}-client-certs.yaml

        kubectl apply -f $DIR/${PRODUCT}-daemon-certs.yaml
        kubectl apply -f $DIR/${PRODUCT}-client-certs.yaml
      )
    }

    migrate_clickhouse_password_to_dedicated_secret() {
      # Get the value of CLICKHOUSE_USER_PASSWORD from the secret
      CLICKHOUSE_PASSWORD=$(kubectl -n $TRUEFOUNDRY_NAMESPACE get secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME -o jsonpath='{.data.CLICKHOUSE_USER_PASSWORD}' | base64 --decode)
      # Check if the CLICKHOUSE_PASSWORD is empty
      if [ -z "$CLICKHOUSE_PASSWORD" ]; then
        print_yellow "CLICKHOUSE_USER_PASSWORD is not set in the secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME. Checking with CLICKHOUSE_PASSWORD..."
        CLICKHOUSE_PASSWORD=$(kubectl -n $TRUEFOUNDRY_NAMESPACE get secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME -o jsonpath='{.data.CLICKHOUSE_PASSWORD}' | base64 --decode)
        if [ -z "$CLICKHOUSE_PASSWORD" ]; then
          print_red "CLICKHOUSE_PASSWORD is also not set in the secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME."
          exit 1
        fi
      fi
      # Create the new secret using the CLICKHOUSE_PASSWORD
      kubectl create secret generic $TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME --from-literal=CLICKHOUSE_PASSWORD="$CLICKHOUSE_PASSWORD" -n $TRUEFOUNDRY_NAMESPACE
    }

    generate_clickhouse_password_and_add_to_dedicated_secret() {
      # Generate the value for CLICKHOUSE_PASSWORD
      CLICKHOUSE_PASSWORD=$(openssl rand -hex 16)
      # Create the new secret using the CLICKHOUSE_PASSWORD
      kubectl create secret generic $TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME --from-literal=CLICKHOUSE_PASSWORD="$CLICKHOUSE_PASSWORD" -n $TRUEFOUNDRY_NAMESPACE
    }

    # check if the following variables are not set
    if [ -z "$TRUEFOUNDRY_NAMESPACE" ]; then
        print_red "TRUEFOUNDRY_NAMESPACE is not set."
        exit 1
    fi

    install_binaries
    create_tfy_buildkit_tls_certificates_and_secrets  *.{{ include "tfy-buildkitd.buildkitdServiceName" . }}.$TRUEFOUNDRY_NAMESPACE.svc.cluster.local *.$TRUEFOUNDRY_NAMESPACE.svc.cluster.local

    if [[ "$CLICKHOUSE_ENABLED" == "true" ]]; then
      print_yellow "Clickhouse needs to be setup."
      kubectl -n $TRUEFOUNDRY_NAMESPACE get secret $TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME
      if [ $? -eq 0 ]; then
        print_red "Secret $TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME already exists. Exiting..."
      else
        kubectl -n $TRUEFOUNDRY_NAMESPACE get secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME
        if [ $? -eq 0 ]; then
          print_yellow "We are going to create the secret $TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME from existing secret $OLD_TRUEFOUNDRY_CLICKHOUSE_SECRET_NAME. This is a migration scenario dated 2025-04-02"
          migrate_clickhouse_password_to_dedicated_secret
        else
          print_yellow "Generating new clickhouse password and adding to secret."
          generate_clickhouse_password_and_add_to_dedicated_secret
        fi
      fi
    fi

    kubectl -n $TRUEFOUNDRY_NAMESPACE get cm $TRUEFOUNDRY_NATS_CONFIGMAP
    if [ $? -eq 0 ]; then
      print_yellow "$TRUEFOUNDRY_NATS_CONFIGMAP already found. Skipping creation of NATS account and configmap..."
      exit 0
    fi
    print_yellow "$TRUEFOUNDRY_NATS_CONFIGMAP not found. Creating NATS account and configmap..."

    # Setup NSC env
    NSC_ROOT=$(pwd)/nsc
    export NKEYS_PATH=$NSC_ROOT/nkeys
    export NSC_HOME=$NSC_ROOT/accounts
    nsc env -s "${NSC_HOME}/nats"
    nsc env

    # Create Operator
    nsc add operator --sys --name truefoundry

    # Create tfy-controlplane account. The seed for this account is provided as an environment variable
    # to servicefoundry-server
    nsc add account --name tfy-controlplane
    # enable JS - by setting js-disk-storage or js-mem-storage
    # Note: -1 means unlimited making it configurable in server side
    nsc edit account --name tfy-controlplane --js-disk-storage -1 --js-mem-storage -1

    # Create user to create a stream.
    nsc add user --account tfy-controlplane --name js-creator
    nsc generate creds > "${NSC_ROOT}/user.creds"

    # Store account info.
    nsc generate config --mem-resolver --config-file "${NSC_ROOT}/resolver.conf"

    # Get seed of the account
    NKEYS_EXPORT_DIR=$NSC_ROOT/exported-keys
    nsc export keys --account tfy-controlplane --accounts --dir "${NKEYS_EXPORT_DIR}"
    NKEYS_FILE_NAME=$(ls "${NKEYS_EXPORT_DIR}" | grep "A*.nk" | head -1)
    NKEYS_PATH="${NKEYS_EXPORT_DIR}/${NKEYS_FILE_NAME}"
    NATS_SEED=$(cat "${NKEYS_PATH}")

    # Tar and save the complete nsc folder
    # We can use this later to change any nats config
    # Steps to extract the folder:
    # - kubectl get secret $TRUEFOUNDRY_NATS_SECRET_NAME -o jsonpath='{.data.nsc_dir\.tar}' -n $TRUEFOUNDRY_NAMESPACE | base64 --decode > nsc_dir.tar
    # - tar -xf nsc_dir.tar
    tar -cf nsc_dir.tar ./nsc/
    kubectl create secret generic $TRUEFOUNDRY_NATS_DIR_SECRET_NAME --from-file "nsc_dir.tar" -n $TRUEFOUNDRY_NAMESPACE -o yaml --dry-run=client | kubectl apply -f -
    rm -r nsc_dir.tar

    # Create K8s config map to store the account resolver.
    # This will be imported by the main config file.
    kubectl create configmap $TRUEFOUNDRY_NATS_CONFIGMAP --from-file "nsc/resolver.conf" -n $TRUEFOUNDRY_NAMESPACE -o yaml --dry-run=client | kubectl apply -f -

    # creating the secret
    kubectl create secret generic $TRUEFOUNDRY_NATS_SECRET_NAME --from-literal=NATS_CONTROLPLANE_ACCOUNT_SEED=$NATS_SEED -n $TRUEFOUNDRY_NAMESPACE -o yaml --dry-run=client | kubectl apply -f -
{{- end }}