{{- if .Values.tfyBuild.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: build
  labels:
    {{- include "tfy-build.labels" . | nindent 4 }}
  annotations:
    {{- include "tfy-build.annotations" . | indent 4 }}
spec:
  serviceAccountName: {{ include "tfy-build.serviceAccountName" . }}
  workflowMetadata:
    labelsFrom:
      "truefoundry.com/buildName":
        expression: workflow.name
  entrypoint: build
  activeDeadlineSeconds: 14400
  onExit: exit-handler
  arguments:
    parameters:
      - name: callbackURL
      - name: buildSource
      - name: buildConfig
      - name: dockerRegistryURL
      - name: dockerRegistryUsername
      - name: dockerRegistryPassword
      - name: dockerRepo
      - name: dockerTag
      - name: buildkitServiceURL
      - name: applicationId
        default: ""
      - name: deploymentId
        default: ""
  templates:
    - name: build
      inputs:
        parameters:
          - name: buildSource
          - name: buildConfig
          - name: dockerRegistryURL
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
          - name: dockerRepo
          - name: dockerTag
          - name: buildkitServiceURL
          - name: callbackURL
          - name: applicationId
          - name: deploymentId
      steps:
      - - name: should-use-external-buildkit
          template: should-use-external-buildkit
          arguments:
            parameters:
              - name: buildkitServiceURL
                value: "{{`{{inputs.parameters.buildkitServiceURL}}`}}"
      - - name: build-and-push-with-buildkit-sidecar
          template: build-and-push-with-buildkit-sidecar
          when: >-
            '{{`{{steps.should-use-external-buildkit.outputs.parameters.shouldUse}}`}}' != 'true'
          arguments:
            parameters:
            - name: buildSource
              value: "{{`{{inputs.parameters.buildSource}}`}}"
            - name: buildConfig
              value: "{{`{{inputs.parameters.buildConfig}}`}}"
            - name: dockerRegistryURL
              value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
            - name: dockerRegistryUsername
              value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
            - name: dockerRegistryPassword
              value:  "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
            - name: dockerRepo
              value: "{{`{{inputs.parameters.dockerRepo}}`}}"
            - name: dockerTag
              value: "{{`{{inputs.parameters.dockerTag}}`}}"
            - name: buildkitServiceURL
              value: "127.0.0.1:1234"
            - name: callbackURL
              value: "{{`{{inputs.parameters.callbackURL}}`}}"
            - name: applicationId
              value: "{{`{{inputs.parameters.applicationId}}`}}"
            - name: deploymentId
              value: "{{`{{inputs.parameters.deploymentId}}`}}"
      - - name: build-and-push-with-external-buildkit
          template: build-and-push-with-external-buildkit
          when: >-
            '{{`{{steps.should-use-external-buildkit.outputs.parameters.shouldUse}}`}}' == 'true'
          arguments:
            parameters:
            - name: buildSource
              value: "{{`{{inputs.parameters.buildSource}}`}}"
            - name: buildConfig
              value: "{{`{{inputs.parameters.buildConfig}}`}}"
            - name: dockerRegistryURL
              value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
            - name: dockerRegistryUsername
              value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
            - name: dockerRegistryPassword
              value:  "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
            - name: dockerRepo
              value: "{{`{{inputs.parameters.dockerRepo}}`}}"
            - name: dockerTag
              value: "{{`{{inputs.parameters.dockerTag}}`}}"
            - name: buildkitServiceURL
              value: "{{`{{inputs.parameters.buildkitServiceURL}}`}}"
            - name: callbackURL
              value: "{{`{{inputs.parameters.callbackURL}}`}}"
            - name: applicationId
              value: "{{`{{inputs.parameters.applicationId}}`}}"
            - name: deploymentId
              value: "{{`{{inputs.parameters.deploymentId}}`}}"

    - name: exit-handler
      inputs:
        parameters:
          - name: callbackURL
          - name: dockerRegistryURL
          - name: dockerRepo
          - name: dockerTag
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
      steps:
      - - name: success-callback
          when: "{{`{{workflow.status}}`}} == Succeeded"
          template: update-status
          arguments:
            parameters:
            - name: url
              value: "{{`{{inputs.parameters.callbackURL}}`}}"
            - name: payload
              value: '{"status":"SUCCEEDED"}'
            - name: tfyBuildStatus
              value: "{{`{{workflow.outputs.parameters.tfyBuildStatus}}`}}"
            - name: tfyTimeTakenToBuildImageSeconds
              value: "{{`{{workflow.outputs.parameters.tfyTimeTakenToBuildImageSeconds}}`}}"
            - name: tfyIsGlobalBuilderUsed
              value: "{{`{{workflow.outputs.parameters.tfyShouldUseGlobalBuilder}}`}}"
            - name: tfyTimeTakenToDownloadSourceCodeSeconds
              value: "{{`{{workflow.outputs.parameters.tfyTimeTakenToDownloadSourceCodeSeconds}}`}}"
        - name: failure-callback
          when: "{{`{{workflow.status}}`}} != Succeeded"
          template: update-status
          arguments:
            parameters:
            - name: url
              value: "{{`{{inputs.parameters.callbackURL}}`}}"
            - name: payload
              value: '{"status":"FAILED"}'
            - name: tfyBuildStatus
              value: "{{`{{workflow.outputs.parameters.tfyBuildStatus}}`}}"
            - name: tfyTimeTakenToBuildImageSeconds
              value: "{{`{{workflow.outputs.parameters.tfyTimeTakenToBuildImageSeconds}}`}}"
            - name: tfyIsGlobalBuilderUsed
              value: "{{`{{workflow.outputs.parameters.tfyShouldUseGlobalBuilder}}`}}"
            - name: tfyTimeTakenToDownloadSourceCodeSeconds
              value: "{{`{{workflow.outputs.parameters.tfyTimeTakenToDownloadSourceCodeSeconds}}`}}"
      - - name: should-build-soci-index
          template: should-build-soci-index
          when: >-
            '{{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.enabled }}' == 'true'
              &&
            {{`{{workflow.status}}`}} == Succeeded
          arguments:
            parameters:
              - name: dockerRegistryURL
                value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
              - name: dockerRegistryUsername
                value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
              - name: dockerRegistryPassword
                value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
              - name: dockerRepo
                value: "{{`{{inputs.parameters.dockerRepo}}`}}"
              - name: dockerTag
                value: "{{`{{inputs.parameters.dockerTag}}`}}"
      - - name: build-and-push-soci-index
          template: build-and-push-soci-index
          when: >-
            {{`{{steps.should-build-soci-index.status}}`}} == Succeeded
              && 
            '{{`{{steps.should-build-soci-index.outputs.parameters.result}}`}}' == 'true'
          arguments:
            parameters:
              - name: dockerRegistryURL
                value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
              - name: dockerRegistryUsername
                value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
              - name: dockerRegistryPassword
                value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
              - name: dockerRepo
                value: "{{`{{inputs.parameters.dockerRepo}}`}}"
              - name: dockerTag
                value: "{{`{{inputs.parameters.dockerTag}}`}}"

    - name: should-use-external-buildkit
      activeDeadlineSeconds: 300
      retryStrategy:
        limit: 0
      inputs:
        parameters:
          - name: buildkitServiceURL
      outputs:
        parameters:
        - name: shouldUse
          valueFrom:
            path: /opt/truefoundry/output/shouldUse
          globalName: tfyShouldUseGlobalBuilder
      volumes:
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      script:
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.tag }}
        command: [bash]
        source: |
          #!/bin/bash
          export PATH=$PATH:/scripts
          mkdir -p /opt/truefoundry/output
          if [ -z "$BUILDKIT_SERVICE_URL" ] || [ "$BUILDKIT_SERVICE_URL" = "\"\"" ]; then
            echo -n "false" > /opt/truefoundry/output/shouldUse
            exit 0
          fi
          wait-for-builder.sh 10 >/dev/null 2>&1
          if [ $? -eq 1 ]; then
            echo -n "false" > /opt/truefoundry/output/shouldUse
          else
            echo -n "true" > /opt/truefoundry/output/shouldUse
          fi
        env:
          - name: BUILDKIT_SERVICE_URL
            value: "{{`{{inputs.parameters.buildkitServiceURL}}`}}"
        resources: 
          {{- toYaml .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.resources | nindent 10 }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
    - name: build-and-push-with-buildkit-sidecar
      activeDeadlineSeconds: 5400
      metadata:
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
          karpenter.sh/do-not-disrupt: 'true'
          karpenter.sh/do-not-evict: 'true'
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: buildSource
          - name: buildConfig
          - name: dockerRegistryURL
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
          - name: dockerRepo
          - name: dockerTag
          - name: buildkitServiceURL
          - name: callbackURL
          - name: applicationId
          - name: deploymentId
      outputs:
        parameters:
        - name: tfyBuildStatus
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/buildStatus
          globalName: tfyBuildStatus
        - name: tfyTimeTakenToBuildImageSeconds
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/tfyTimeTakenToBuildImageSeconds
          globalName: tfyTimeTakenToBuildImageSeconds
        - name: tfyTimeTakenToDownloadSourceCodeSeconds
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/tfyTimeTakenToDownloadSourceCodeSeconds
          globalName: tfyTimeTakenToDownloadSourceCodeSeconds
      volumes:
      {{ if ne .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret "" }}
        - name: truefoundry-docker-config
          secret:
            items:
            - key: .dockerconfigjson
              path: base_config.json
            secretName: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret }}
      {{- end }}
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      {{- with .Values.tfyBuild.truefoundryWorkflows.extraVolumes }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- range $value := .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets }}
        - name: {{ $value.id | replace "." "-" }}
          secret:
            items:
            - key: {{ $value.valueFrom.secretKey }}
              path: {{ $value.id }}
            secretName: {{ $value.valueFrom.secretName }}
      {{- end }}
      script:
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.tag }}
        command: [bash]
        env: 
          - name: BUILD_SOURCE
            value: "{{`{{inputs.parameters.buildSource}}`}}"
          - name: BUILD_CONFIG
            value: "{{`{{inputs.parameters.buildConfig}}`}}"
          - name: DOCKER_REGISTRY_URL
            value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
          - name: DOCKER_REGISTRY_USERNAME
            value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
          - name: DOCKER_REGISTRY_PASSWORD
            value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
          - name: DOCKER_REPO
            value: "{{`{{inputs.parameters.dockerRepo}}`}}"
          - name: DOCKER_TAG
            value: "{{`{{inputs.parameters.dockerTag}}`}}"
          - name: BUILDKIT_SERVICE_URL
            value: "{{`{{inputs.parameters.buildkitServiceURL}}`}}"
          - name: CALLBACK_URL
            value: "{{`{{inputs.parameters.callbackURL}}`}}"
          - name: APPLICATION_ID
            value: "{{`{{inputs.parameters.applicationId}}`}}"
          - name: DEPLOYMENT_ID
            value: "{{`{{inputs.parameters.deploymentId}}`}}"
          - name: DONE_MARKER
            value: {{ .Values.tfyBuild.truefoundryWorkflows.logMarkers.done }}
          - name: FAILED_MARKER
            value: {{ .Values.tfyBuild.truefoundryWorkflows.logMarkers.failed }}
          - name: TFY_BUILD_SECRETS
            value: '{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets | toJson }}'
          # This is the path where the source code will be downloaded
          - name: SOURCE_CODE_DOWNLOAD_PATH
            value: /mnt/tfy/source-code
          {{- with .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.extraEnvs }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
          {{ if ne .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret "" }}
          - name: truefoundry-docker-config
            mountPath: /root/.truefoundry/.docker/
          {{- end }}
        {{- range $value := .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets }}
          - name: {{ $value.id | replace "." "-" }}
            mountPath: "/truefoundry-build-secrets/"
        {{- end }}
        {{- with .Values.tfyBuild.truefoundryWorkflows.extraVolumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
        resources: 
          {{- toYaml .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.resources | nindent 10 }}
        source: |
          #!/bin/bash
          set -e
          export PATH=$PATH:/scripts
          mkdir -p /opt/truefoundry/output
          (
          {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.script | nindent 10 }}
          )
      sidecars:
      - name: buildkitd
        image: {{ .Values.tfyBuild.truefoundryWorkflows.buildkitd.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.buildkitd.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.buildkitd.image.tag }}
        command:
          - /usr/local/bin/entrypoint.sh
        {{- with .Values.tfyBuild.truefoundryWorkflows.buildkitd.extraEnvs }}
        env:
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.tfyBuild.truefoundryWorkflows.buildkitd.extraVolumeMounts }}
        volumeMounts:
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.tfyBuild.truefoundryWorkflows.buildkitd.resources | nindent 10 }}
        securityContext:
          privileged: true
        ports:
          - name: grpc-buidkitd
            containerPort: 1234
            protocol: TCP
        readinessProbe:
          exec:
            command:
              - buildctl
              - debug
              - workers
        livenessProbe:
          exec:
            command:
              - buildctl
              - debug
              - workers
    - name: build-and-push-with-external-buildkit
      activeDeadlineSeconds: 5400
      metadata:
        annotations:
          cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
          karpenter.sh/do-not-disrupt: 'true'
          karpenter.sh/do-not-evict: 'true'
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: buildSource
          - name: buildConfig
          - name: dockerRegistryURL
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
          - name: dockerRepo
          - name: dockerTag
          - name: buildkitServiceURL
          - name: callbackURL
          - name: applicationId
          - name: deploymentId
      outputs:
        parameters:
        - name: tfyBuildStatus
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/buildStatus
          globalName: tfyBuildStatus
        - name: tfyTimeTakenToBuildImageSeconds
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/tfyTimeTakenToBuildImageSeconds
          globalName: tfyTimeTakenToBuildImageSeconds
        - name: tfyTimeTakenToDownloadSourceCodeSeconds
          valueFrom:
            default: ""
            path: /opt/truefoundry/output/tfyTimeTakenToDownloadSourceCodeSeconds
          globalName: tfyTimeTakenToDownloadSourceCodeSeconds
      volumes:
      {{ if ne .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret "" }}
        - name: truefoundry-docker-config
          secret:
            items:
            - key: .dockerconfigjson
              path: base_config.json
            secretName: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret }}
      {{- end }}
      {{- if index .Values "tfy-buildkitd-service" "tls" "enabled" }}
        - name: buildkit-client-cert
          secret:
            secretName: {{ index .Values "tfy-buildkitd-service" "tls" "buildkitClientCertsSecretName" }}
      {{- end }}
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      {{- with .Values.tfyBuild.truefoundryWorkflows.extraVolumes }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- range $value := .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets }}
        - name: {{ $value.id | replace "." "-" }}
          secret:
            items:
            - key: {{ $value.valueFrom.secretKey }}
              path: {{ $value.id }}
            secretName: {{ $value.valueFrom.secretName }}
      {{- end }}
      script:
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.tag }}
        command: [bash]
        env: 
          - name: BUILD_SOURCE
            value: "{{`{{inputs.parameters.buildSource}}`}}"
          - name: BUILD_CONFIG
            value: "{{`{{inputs.parameters.buildConfig}}`}}"
          - name: DOCKER_REGISTRY_URL
            value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
          - name: DOCKER_REGISTRY_USERNAME
            value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
          - name: DOCKER_REGISTRY_PASSWORD
            value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
          - name: DOCKER_REPO
            value: "{{`{{inputs.parameters.dockerRepo}}`}}"
          - name: DOCKER_TAG
            value: "{{`{{inputs.parameters.dockerTag}}`}}"
          - name: BUILDKIT_SERVICE_URL
            value: "{{`{{inputs.parameters.buildkitServiceURL}}`}}"
          - name: CALLBACK_URL
            value: "{{`{{inputs.parameters.callbackURL}}`}}"
          - name: APPLICATION_ID
            value: "{{`{{inputs.parameters.applicationId}}`}}"
          - name: DEPLOYMENT_ID
            value: "{{`{{inputs.parameters.deploymentId}}`}}"
          - name: DONE_MARKER
            value: {{ .Values.tfyBuild.truefoundryWorkflows.logMarkers.done }}
          - name: FAILED_MARKER
            value: {{ .Values.tfyBuild.truefoundryWorkflows.logMarkers.failed }}
          - name: TFY_BUILD_SECRETS
            value: '{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets | toJson }}'
          # This is the path where the source code will be downloaded
          - name: SOURCE_CODE_DOWNLOAD_PATH
            value: /mnt/tfy/source-code
          {{- with .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.extraEnvs }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
          {{ if ne .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.baseImagePullSecret "" }}
          - name: truefoundry-docker-config
            mountPath: /root/.truefoundry/.docker/
          {{- end }}
        {{- if index .Values "tfy-buildkitd-service" "tls" "enabled" }}
          - name: buildkit-client-cert
            mountPath: "/etc/buildkit/certs/"
        {{- end }}
        {{- range $value := .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.buildSecrets }}
          - name: {{ $value.id | replace "." "-" }}
            mountPath: "/truefoundry-build-secrets/"
        {{- end }}
        {{- with .Values.tfyBuild.truefoundryWorkflows.extraVolumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
        resources: 
          {{- toYaml .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.resources | nindent 10 }}
        source: |
          #!/bin/bash
          set -e
          echo "Using external buildkit service"
          export PATH=$PATH:/scripts
          mkdir -p /opt/truefoundry/output
          (
          {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.script | nindent 10 }}
          )
    - name: update-status
      activeDeadlineSeconds: 5400
      retryStrategy:
        limit: 4
        retryPolicy: "Always"
        backoff:
          duration: 1s
          factor: 2
          # maxDuration is for the whole node and not for every retry
          # maxDuration will only be considered if there was atleast one retry
          maxDuration: 30m
      inputs:
        parameters:
          - name: url
          - name: payload
          - name: tfyBuildStatus
          - name: tfyTimeTakenToBuildImageSeconds
          - name: tfyIsGlobalBuilderUsed
          - name: tfyTimeTakenToDownloadSourceCodeSeconds
      volumes:
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      script:
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sfyBuilder.image.tag }}
        command: [bash]
        env:
          - name: CALLBACK_URL
            value: "{{`{{inputs.parameters.url}}`}}"
          - name: PAYLOAD
            value: "{{`{{inputs.parameters.payload}}`}}"
          - name: tfyBuildStatus
            value: "{{`{{inputs.parameters.tfyBuildStatus}}`}}"
          - name: TFY_METADATA_TIME_TAKEN_TO_BUILD_IMAGE_SECONDS
            value: "{{`{{inputs.parameters.tfyTimeTakenToBuildImageSeconds}}`}}"
          - name: IS_GLOBAL_BUILDER_USED
            value: "{{`{{inputs.parameters.tfyIsGlobalBuilderUsed}}`}}"
          - name: TFY_TIME_TAKEN_TO_DOWNLOAD_SOURCE_CODE_SECONDS
            value: "{{`{{inputs.parameters.tfyTimeTakenToDownloadSourceCodeSeconds}}`}}"
        resources:
          limits:
            cpu: 20m
            ephemeral-storage: 256Mi
            memory: 100Mi
          requests:
            cpu: 10m
            ephemeral-storage: 128Mi
            memory: 50Mi
        volumeMounts:
          - name: scripts
            mountPath: /scripts
        source: |
          #!/bin/bash
          set -eu
          export PATH=$PATH:/scripts
          mkdir -p /opt/truefoundry/output
          FINAL_PAYLOAD=$(echo "$PAYLOAD")

          # If the build step did not happen due to a pod spec error, the exit handler will be called without resolving \{\{\}\} Argo Variables.
          # So if a variable value is starting with \{\{ it means that the value was not set or resolved, and we can ignore it.
          if [[ -n "$tfyBuildStatus" && "$tfyBuildStatus" != \{\{* ]]; then
            echo "The build status has already been updated to $tfyBuildStatus"
            FINAL_PAYLOAD=$(echo "$FINAL_PAYLOAD" | jq 'del(.status)')
          fi

          update-build.sh "$FINAL_PAYLOAD"

    - name: should-build-soci-index
      # activeDeadlineSeconds is the maximum time the step will run(It will be restarted after every retry)
      activeDeadlineSeconds: 600
      metrics:
        prometheus:
          - name: tfy_build_soci_index_status
            help: "SOCI index build and push status"
            labels:
              - key: name
                value: "{{`{{steps.name}}`}}"
              - key: status
                value: "{{`{{status}}`}}"
            when: "{{`{{status}}`}} != Skipped"
            counter:
              value: "1"
          - name: tfy_build_soci_index_duration_sec
            help: "SOCI index build and push duration"
            labels:
              - key: name
                value: "{{`{{steps.name}}`}}"
              - key: status
                value: "{{`{{status}}`}}"
            when: "{{`{{status}}`}} != Skipped"
            gauge: 
              value: "{{`{{duration}}`}}"
      inputs:
        parameters:
          - name: dockerRegistryURL
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
          - name: dockerRepo
          - name: dockerTag
      retryStrategy:
        backoff:
          duration: 1s
          factor: 2
          # maxDuration is for the whole node and not for every retry
          # maxDuration will only be considered if there was atleast one retry
          maxDuration: 1h
        limit: 3
        retryPolicy: Always
      volumes:
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraVolumes }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      outputs:
        parameters:
        - name: result
          valueFrom:
            path: /tmp/result
      script:
        command: [bash]
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.tag }}
        env:
          - name: DOCKER_REGISTRY_URL
            value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
          - name: DOCKER_REGISTRY_USERNAME
            value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
          - name: DOCKER_REGISTRY_PASSWORD
            value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
          - name: DOCKER_REPO
            value: "{{`{{inputs.parameters.dockerRepo}}`}}"
          - name: DOCKER_TAG
            value: "{{`{{inputs.parameters.dockerTag}}`}}"
          - name: SIZE_THRESHOLD
            value: {{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.imageSizeThresholdBytes | int | quote }}
        {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraEnvs }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            cpu: 50m
            ephemeral-storage: 100Mi
            memory: 50Mi
          limits:
            cpu: 50m
            ephemeral-storage: 100Mi
            memory: 50Mi
        volumeMounts:
          - name: scripts
            mountPath: /scripts
        {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraVolumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
        source: |
          #!/bin/bash

          set -e
          export PATH=$PATH:/scripts
          registry-login.sh
          should-build-soci-index.sh
          
    - name: build-and-push-soci-index
      # activeDeadlineSeconds is the maximum time the step will run(It will be restarted after every retry)
      activeDeadlineSeconds: 3600
      metrics:
        prometheus:
          - name: tfy_build_soci_index_status
            help: "SOCI index build and push status"
            labels:
              - key: name
                value: "{{`{{steps.name}}`}}"
              - key: status
                value: "{{`{{status}}`}}"
            when: "{{`{{status}}`}} != Skipped"
            counter:
              value: "1"
          - name: tfy_build_soci_index_duration_sec
            help: "SOCI index build and push duration"
            labels:
              - key: name
                value: "{{`{{steps.name}}`}}"
              - key: status
                value: "{{`{{status}}`}}"
            when: "{{`{{status}}`}} != Skipped"
            gauge: 
              value: "{{`{{duration}}`}}"
      inputs:
        parameters:
          - name: dockerRegistryURL
          - name: dockerRegistryUsername
          - name: dockerRegistryPassword
          - name: dockerRepo
          - name: dockerTag
      retryStrategy:
        limit: 1
        retryPolicy: Always
      volumes:
        - name: scripts
          projected:
            defaultMode: 0755
            sources:
              - configMap:
                  name: {{ include "tfy-build.fullname" . }}-scripts
                  items:
            {{- range $path, $name := .Files.Glob "tfy-build-scripts/*"}}
                    - key: {{ $path | replace "tfy-build-scripts/" "" }}
                      path: {{ $path | replace "tfy-build-scripts/" "" }}
            {{- end}}
      {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraVolumes }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      script:
        command: [bash]
        image: {{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.registry | default .Values.global.image.registry }}/{{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.repository }}:{{ .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.image.tag }}
        env:
          - name: DOCKER_REGISTRY_URL
            value: "{{`{{inputs.parameters.dockerRegistryURL}}`}}"
          - name: DOCKER_REGISTRY_USERNAME
            value: "{{`{{inputs.parameters.dockerRegistryUsername}}`}}"
          - name: DOCKER_REGISTRY_PASSWORD
            value: "{{`{{inputs.parameters.dockerRegistryPassword}}`}}"
          - name: DOCKER_REPO
            value: "{{`{{inputs.parameters.dockerRepo}}`}}"
          - name: DOCKER_TAG
            value: "{{`{{inputs.parameters.dockerTag}}`}}"
        {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraEnvs }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            cpu: 500m
            ephemeral-storage: 10Gi
            memory: 700Mi
          limits:
            cpu: 1000m
            ephemeral-storage: 30Gi
            memory: 1024Mi
        securityContext:
          privileged: true
        volumeMounts:
          - name: scripts
            mountPath: /scripts
        {{- with .Values.tfyBuild.truefoundryWorkflows.sociIndexBuildAndPush.extraVolumeMounts }}
        {{- toYaml . | nindent 10 }}
        {{- end }}
        source: |
          #!/bin/bash
          set -e
          export PATH=$PATH:/scripts
          registry-login.sh
          build-soci-index.sh
  nodeSelector:
  {{- include "tfy-build.nodeSelector" . | nindent 8 }}
  {{- $mergedAffinity := dict | merge .Values.tfyBuild.truefoundryWorkflows.affinity .Values.global.affinity }}
  {{- if $mergedAffinity }}
  affinity:
  {{- toYaml $mergedAffinity | nindent 8 }}
  {{- end }}
  tolerations:
    {{- .Values.global.tolerations | toYaml | nindent 4 }}
    {{- if .Values.tfyBuild.tolerations }}
    {{- .Values.tfyBuild.tolerations | toYaml | nindent 4 }}
    {{- end }}
{{- end }}
