## @section tfy-notebook-controller configurations
##

## Labels for the notebook controller.
## @param labels.app Label for the application.
## @param labels.kustomize.component Label for the Kustomize component.
##
labels:
  app: notebook-controller
  kustomize.component: notebook-controller

## Namespace override for the notebook controller.
## @param namespaceOverride Namespace override for the notebook controller.
##
namespaceOverride: ""

## Image pull secrets for the notebook controller.
## @param imagePullSecrets Image pull secrets for the notebook controller.
##
imagePullSecrets: []

## Istio Gateway for the notebook controller.
## @param istioGateway Istio Gateway for the notebook controller.
##
istioGateway: istio-system/tfy-wildcard

## Image configuration for the notebook controller.
## Image tag for the notebook controller.
## @param image.pullPolicy Pull Policy for notebook controller.
## @param image.repository Image repository for the notebook controller.
## @param image.tag Image tag for the notebook controller.
##
image:
  pullPolicy: IfNotPresent
  repository: "tfy.jfrog.io/tfy-images/tfy-notebook-controller"
  tag: "b57a4692b66f4bb6050d51805dfbd6c0af2856a0"
## Resource limits and requests for the notebook controller.
## @param resources.limits.cpu CPU limit for the notebook controller.
## @param resources.limits.memory Memory limit for the notebook controller.
## @param resources.limits.ephemeral-storage Ephemeral storage limit for the notebook controller.
## @param resources.requests.cpu CPU request for the notebook controller.
## @param resources.requests.memory Memory request for the notebook controller.
## @param resources.requests.ephemeral-storage Ephemeral storage request for the notebook controller.
##
resources:
  limits:
    cpu: 100m
    memory: 256Mi
    ephemeral-storage: 256Mi
  requests:
    cpu: 50m
    memory: 128Mi
    ephemeral-storage: 128Mi

## Tolerations for the notebook controller deployment.
## @param tolerations list of tolerations
##
tolerations: []

## Affinity for notebook controller deployment
## @param affinity Affinity for the notebook controller deployment
affinity: {}

## Base domain URL for the notebook without scheme.
## Can be a wildcard like *.example.com
## @param notebookBaseDomainUrl Base domain URL for the notebook.
notebookBaseDomainUrl: <to_be_provided>

## OAuth2 configuration settings.
##
## @param oauth.enabled Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.type Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.clientId Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.tokenEndpoint Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.authorizationEndpoint Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.jwksUri Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.clientSecret Secret key used for OAuth2 authentication. This key should be kept confidential.
## @param oauth.hmac HMAC key used for encoding/decoding tokens in OAuth2. This key is crucial for maintaining token integrity and security.
##
oauth:
  enabled: false
  type: truefoundry
  clientId: ""
  tokenEndpoint: ""
  authorizationEndpoint: ""
  jwksUri: ""
  clientSecret: ""
  hmac: ""
  ## External authorization configuration
  ## 
  ## @param oauth.truefoundryExternalAuthorization.enabled Enable Truefoundry authorization for notebooks deployed.
  ## @param oauth.truefoundryExternalAuthorization.controlPlaneURL Control plane URL for TrueFoundry
  ## @param oauth.truefoundryExternalAuthorization.image Image of Truefoundry external authorization server
  ##
  truefoundryExternalAuthorization:
    enabled: true
    controlPlaneURL: ""
    image: "tfy.jfrog.io/tfy-images/ext-authz-server:762b460727a2d2627216b0e5c7b311711a739885"

## Config for SDS service
##
sdsServer:
  ## @param sdsServer.replicas Number of replicas of sds server
  replicas: 2
  image:
    ## @param sdsServer.image.repository Repository for sds-server
    repository: tfy.jfrog.io/tfy-images/sds-server
    ## @param sdsServer.image.tag Tag for sds-server
    tag: "c3bb65485f56faaa236f4ee02074c6da7ab269a8"
  ## @param sdsServer.affinity [object] Node affinity for sds-server
  affinity: {}
  ## @param sdsServer.imagePullSecrets [array] Image pull credentials for sds-server
  imagePullSecrets: []
  ## @param sdsServer.command Command and arguments to start the sds-server application.
  command:
    - /app/sds-server
    - "--port"
    - "8000"
    - "--file"
    - /secrets/secrets.yaml
  readinessProbe:
    tcpSocket:
      ## @param sdsServer.readinessProbe.tcpSocket.port Port for TCP socket used in readiness probe
      port: 8000
    ## @param sdsServer.readinessProbe.initialDelaySeconds Initial delay before performing readiness probe
    initialDelaySeconds: 15
    ## @param sdsServer.readinessProbe.periodSeconds Frequency of performing readiness probe
    periodSeconds: 10
  livenessProbe:
    tcpSocket:
      ## @param sdsServer.livenessProbe.tcpSocket.port Port for TCP socket used in liveness probe
      port: 8000
    ## @param sdsServer.livenessProbe.initialDelaySeconds Initial delay before performing liveness probe
    initialDelaySeconds: 15
    ## @param sdsServer.livenessProbe.periodSeconds Frequency of performing liveness probe
    periodSeconds: 10
  deploymentStrategy:
    ## @param sdsServer.deploymentStrategy.type Type of deployment strategy
    type: RollingUpdate
    rollingUpdate:
      ## @param sdsServer.deploymentStrategy.rollingUpdate.maxSurge Max pods above desired number
      maxSurge: 1
      ## @param sdsServer.deploymentStrategy.rollingUpdate.maxUnavailable Max pods unavailable during update
      maxUnavailable: 1
  ## @param sdsServer.ports[0].containerPort The port on which the container is listening.
  ports:
    - containerPort: 8000
      ## @param sdsServer.ports[0].name The name assigned to this port.
      name: port-8000
      ## @param sdsServer.ports[0].protocol The protocol used by this port (TCP/UDP).
      protocol: TCP
  resources:
    limits:
      ## @param sdsServer.resources.limits.cpu The maximum CPU resources allocated.
      cpu: 0.02
      ## @param sdsServer.resources.limits.ephemeral-storage The maximum ephemeral storage allocated.
      ephemeral-storage: 20M
      ## @param sdsServer.resources.limits.memory The maximum memory resources allocated.
      memory: 50M
    requests:
      ## @param sdsServer.resources.requests.cpu The minimum CPU resources requested.
      cpu: 0.01
      ## @param sdsServer.resources.requests.ephemeral-storage The minimum ephemeral storage requested.
      ephemeral-storage: 10M
      ## @param sdsServer.resources.requests.memory The minimum memory resources requested.
      memory: 30M
  ## @param sdsServer.tolerations [array] Spot tolerations for the notebook controller deployment.
  tolerations:
    - effect: NoSchedule
      key: cloud.google.com/gke-spot
      operator: Equal
      value: 'true'
    - effect: NoSchedule
      key: kubernetes.azure.com/scalesetpriority
      operator: Equal
      value: 'spot'
  topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          ## @param sdsServer.topologySpreadConstraints[0].labelSelector.matchLabels.truefoundry.com/component Component label for the sds-server.
          truefoundry.com/component: sds-server
      ## @param sdsServer.topologySpreadConstraints[0].maxSkew Define the maximum skew of pods across topology domains.
      maxSkew: 1
      ## @param sdsServer.topologySpreadConstraints[0].topologyKey The key for the node labels used in determining the topology spread.
      topologyKey: topology.kubernetes.io/zone
      ## @param sdsServer.topologySpreadConstraints[0].whenUnsatisfiable Behavior policy when spreading constraints cannot be satisfied.
      whenUnsatisfiable: ScheduleAnyway
